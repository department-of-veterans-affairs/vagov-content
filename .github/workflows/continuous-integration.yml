name: Continuous Integration

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

env:
  CHROMEDRIVER_FILEPATH: /usr/local/share/chrome_driver/chromedriver

concurrency:
  group: ${{ github.ref != 'refs/heads/master' && github.ref || github.sha }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  start-runner:
    runs-on: ubuntu-latest
    outputs:
      vagovprod: ${{ steps.start-ec2-runner-name.outputs.vagovprod }}
      vagovprod-id: ${{ steps.start-ec2-runner-id.outputs.vagovprod }}
    env:
      INSTANCE_TYPE: c5.4xlarge

    strategy:
      fail-fast: true
      matrix:
        buildtype: [vagovprod]

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Get latest GHA Runner AMI ID # AMI images are rebuilt every 15 days, use the latest one
        run: |
          echo "RUNNER_AMI_ID=$(aws ec2 describe-images \
          --owners 008577686731 \
          --filters Name=state,Values=available \
          --filters Name=name,Values=packer-gha-runner-ubuntu2004* \
          --query 'sort_by(Images,&CreationDate)[-1].ImageId' \
          --output text)" >> $GITHUB_ENV

      - name: Get Subnet with the most free IPs # We will run these in the dsva-vagov-utility-2x subnet, so filter for those
        run: |
          echo "SUBNET_ID=$(aws ec2 describe-subnets \
          --filters "Name=tag:Name,Values=dsva-vagov-utility-subnet-2*" \
          --query 'sort_by(Subnets,&AvailableIpAddressCount)[-1].SubnetId' \
          --output text)" >> $GITHUB_ENV

      - name: Start EC2 Runner
        id: start-ec2-runner
        uses: department-of-veterans-affairs/ec2-github-runner@main
        with:
          mode: start
          github-token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          ec2-image-id: ${{ env.RUNNER_AMI_ID }}
          ec2-instance-type: ${{ env.INSTANCE_TYPE }}
          subnet-id: ${{ env.SUBNET_ID }}
          security-group-id: sg-0e23b56be3798e3a1
          max_attempts: 3
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "dsva-vagov-vets-website-on-demand-runner"},
              {"Key": "project", "Value": "vagov"},
              {"Key": "office", "Value": "dsva"},
              {"Key": "application", "Value": "on-demand-gha-runner"},
              {"Key": "VAECID", "Value": "AWG20180517003"},
              {"Key": "environment", "Value": "utility"}
            ]

      - name: EC2 Runner Name
        id: start-ec2-runner-name
        run: echo ::set-output name=${{ matrix.buildtype }}::${{ steps.start-ec2-runner.outputs.label }}

      - name: EC2 Runner ID
        id: start-ec2-runner-id
        run: echo ::set-output name=${{ matrix.buildtype }}::${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

  build:
    name: Build
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs[matrix.buildtype] }}
    timeout-minutes: 60

    defaults:
      run:
        working-directory: content-build

    env:
      # Sandbox Drupal address, username, and password is used on branches other than master.
      DRUPAL_ADDRESS: https://cms-content-build-medc0xjkxm4jmpzxl3tfbcs7qcddsivh.ci.cms.va.gov
      DRUPAL_PASSWORD: drupal8
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    strategy:
      fail-fast: true
      matrix:
        buildtype: [vagovprod]
        include:
          - buildtype: vagovprod
            drupal-address: http://internal-dsva-vagov-prod-cms-2000800896.us-gov-west-1.elb.amazonaws.com

    steps:
      - name: Checkout content-build
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/content-build
          path: content-build

      - name: Checkout vagov-content
        uses: actions/checkout@v2
        with:
          path: vagov-content

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Install tar
        run: sudo apt install tar

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            **/node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-on-demand-runner-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ steps.get-node-version.outputs.NODE_VERSION }}-on-demand-runner-

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          command: cd content-build && yarn install --frozen-lockfile --prefer-offline
          max_attempts: 3
          timeout_minutes: 7
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Set Drupal address
        if: ${{ github.ref == 'refs/heads/master' }}
        run: echo "DRUPAL_ADDRESS=${{ matrix.drupal-address }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: set Drupal prod password
        if: ${{ matrix.buildtype == 'vagovprod' && github.ref == 'refs/heads/master' }}
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /cms/prod/drupal_api_users/content_build_api/password
          env_variable_name: DRUPAL_PASSWORD

      - name: set Drupal prod username
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /cms/prod/drupal_api_users/content_build_api/username
          env_variable_name: DRUPAL_USERNAME

      - name: Build
        run: yarn build --buildtype=${{ matrix.buildtype }} --asset-source=local --drupal-address=${{ env.DRUPAL_ADDRESS }} --drupal-user=${{ env.DRUPAL_USERNAME }} --drupal-password="${{ env.DRUPAL_PASSWORD }}" --pull-drupal --drupal-max-parallel-requests=15 --no-drupal-proxy --verbose
        env:
          NODE_ENV: production

      - name: Check broken links
        id: get-broken-link-info
        if: ${{ matrix.buildtype == 'vagovprod' }}
        run: node ./script/github-actions/check-broken-links.js ${{ matrix.buildtype }}

      - name: Prearchive
        run: node ./script/prearchive.js --buildtype=${{ matrix.buildtype }}

  stop-runner:
    name: Stop on-demand-runner
    needs: [start-runner]
    runs-on: ubuntu-latest
    if: ${{ always() }} # Even if an error happened, let's stop the runner
    env:
      INSTANCE_TYPE: c5.4xlarge

    strategy:
      fail-fast: false
      matrix:
        buildtype: [vagovprod]
        include:
          - buildtype: vagovprod
            id: vagovprod-id

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Stop Runner
        uses: department-of-veterans-affairs/ec2-github-runner@main
        with:
          mode: stop
          github-token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          label: ${{ needs.start-runner.outputs[matrix.buildtype]}}
          ec2-instance-id: ${{ needs.start-runner.outputs[matrix.id]}}